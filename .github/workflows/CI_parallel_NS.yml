# This is a basic workflow to help you get started with Actions

name: CI PARALLEL (MPI) NS

########################################################################
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # Comment lines 10-13 to deactivate automatic running until Metis webpage is online again.
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Define strategy matrix
    strategy:
      fail-fast: false
      matrix:
        compiler: ['gfortran']
        mode: ['RELEASE']
        comm: ['PARALLEL']
        enable_threads: ['NO']

    env:
      METIS_HOME:  /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64
    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # IF COMPILER = GFORTRAN -> INSTALL OPEN-MPI #
      - name: install openmpi
        if: (matrix.compiler == 'gfortran')
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev

      - name: Install METIS (gnu)
        if: (matrix.compiler == 'gfortran') 
        run: |
          wget "https://src.fedoraproject.org/lookaside/pkgs/metis/metis-5.1.0.tar.gz/5465e67079419a69e0116de24fce58fe/metis-5.1.0.tar.gz" 
          tar -xvf metis-5.1.0.tar.gz
          cd metis-5.1.0
          make config cc=gcc
          make
          mv /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/libmetis /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/lib
          mv /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/programs /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/bin

      - name: Check METIS PATH
        run: echo $METIS_HOME

      - name: Show ${{matrix.compiler}} version
        run: |
          ${{matrix.compiler}} --version

      - name: Configure
        working-directory: ./Solver
        run: ./configure

      - name: Compile horses3d
        working-directory: ./Solver
        run: |
         make allclean MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
         make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES

########################################################################
#######                         NAVIER-STOKES                   ########
########################################################################

#
# 5) CYLINDER Smagorinsky
# ------------------

      - name: Build NSCylinderSmagorinsky
        working-directory: ./Solver/test/NavierStokes/CylinderSmagorinsky/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run NSCylinderSmagorinsky
        working-directory: ./Solver/test/NavierStokes/CylinderSmagorinsky
        run: |
          mpiexec -n 8 ./horses3d.ns CylinderSmagorinsky.control
        if: '!cancelled()'

#
# 6) CYLINDER WALE
# ------------------

      - name: Build NSCylinderWALE
        working-directory: ./Solver/test/NavierStokes/CylinderWALE/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run NSCylinderWALE
        working-directory: ./Solver/test/NavierStokes/CylinderWALE
        run: |
          mpiexec -n 8 ./horses3d.ns CylinderWALE.control
        if: '!cancelled()'

#
# 7) CYLINDER Vreman
# ------------------

      - name: Build NSCylinderVreman
        working-directory: ./Solver/test/NavierStokes/CylinderVreman/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run NSCylinderVreman
        working-directory: ./Solver/test/NavierStokes/CylinderVreman
        run: |
          mpiexec -n 8 ./horses3d.ns CylinderVreman.control
        if: '!cancelled()'


#
# 8) TAYLOR GREEN VORTEX
# ----------------------

      - name: Build TaylorGreen
        working-directory: ./Solver/test/NavierStokes/TaylorGreen/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run TaylorGreen
        working-directory: ./Solver/test/NavierStokes/TaylorGreen
        run: |
          mpiexec -n 8 ./horses3d.ns TaylorGreen.control
        if: '!cancelled()'

#
# 17) NACA0012 Unsteady Dual Time Stepping
# ----------------------------

      - name: Build DualTimeStepping
        working-directory: ./Solver/test/NavierStokes/DualTimeStepping/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run DualTimeStepping
        working-directory: ./Solver/test/NavierStokes/DualTimeStepping
        run: |
          mpiexec -n 8 ./horses3d.ns DualTimeStepping.control
        if: '!cancelled()'

#
# 23) IBM CYLINDER 
# -------------------

      - name: Build IBM_Cylinder
        working-directory: ./Solver/test/NavierStokes/IBM_Cylinder/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'
     
      - name: Run IBM_Cylinder
        working-directory: ./Solver/test/NavierStokes/IBM_Cylinder
        run: |
          mpiexec -n 8 ./horses3d.ns IBMCylinder.control
        if: '!cancelled()'

#
# 29) Cylinder with acoustics and Reinforcement Learning p-adaptation
# --------------------------------------------
      - name: Build Cylinder_acoustics_pAdaptationRL
        working-directory: ./Solver/test/NavierStokes/Cylinder_acoustics_pAdaptationRL/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run Cylinder_acoustics_pAdaptationRL
        working-directory: ./Solver/test/NavierStokes/Cylinder_acoustics_pAdaptationRL
        run: |
          mpiexec -n 64 ./horses3d.ns Cylinder_acoustics_pAdaptationRL.control
        if: '!cancelled()'

#
# 31) Actuator Line (AL) Interpolation formulation
# --------------------------------------------
      - name: Build AL_interpolation
        working-directory: ./Solver/test/NavierStokes/ActuatorLineInterpolation/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run AL_interpolation
        working-directory: ./Solver/test/NavierStokes/ActuatorLineInterpolation
        run: |
          mpiexec -n 64 ./horses3d.ns Actuator.control
        if: '!cancelled()'


#
# 32) Actuator Line (AL) projection formulation
# --------------------------------------------
      - name: Build AL_projection
        working-directory: ./Solver/test/NavierStokes/ActuatorLineProjection/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run AL_projection
        working-directory: ./Solver/test/NavierStokes/ActuatorLineProjection
        run: |
          mpiexec -n 64 ./horses3d.ns Actuator.control
        if: '!cancelled()'

#
# 33) Cylinder with Adaptive Time Step and Reinforcement Learning p-adaptation
# --------------------------------------------
      - name: Build Cylinder_AdaptiveTimeStep_pAdaptationRL
        working-directory: ./Solver/test/NavierStokes/Cylinder_AdaptiveTimeStep_pAdaptationRL/SETUP
        run: |
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run Cylinder_AdaptiveTimeStep_pAdaptationRL
        working-directory: ./Solver/test/NavierStokes/Cylinder_AdaptiveTimeStep_pAdaptationRL
        run: |
          mpiexec -n 64 ./horses3d.ns Cylinder_AdaptiveTimeStep_pAdaptationRL.control
        if: '!cancelled()'

#
# 34) Atmospheric Boundary Layer (ABL) mapping to boundary
# --------------------------------------------

      - name: Build ABL_BoundaryMapping
        working-directory: ./Solver/test/NavierStokes/ABLBoundaryMapping/SETUP
        run: |
          TEST_HOME_DIR=$(grep '^HOME_DIR=' Makefile | cut -d'=' -f2)
          rm Makefile
          wget https://people.math.sc.edu/Burkardt/f_src/geompack2/geompack2.f90
          cp -r ../../../../../utils/ABLBoundaryMapping/SETUP/* .
          mv Makefile.iABL Makefile
          cp -r ../../../../../utils/ABLBoundaryMapping/PRECURSOR ../
          sed -i "s|^HOME_DIR=.*|HOME_DIR=$TEST_HOME_DIR|" Makefile
          awk '/END SUBROUTINE UserDefinedFinalize/{system("cat testchecks"); print ""; print; next}1' ProblemFile.f90 > temp && mv temp ProblemFile.f90
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_MKL=${{matrix.mkl}} WITH_HDF5=${{matrix.hdf5}}
        if: '!cancelled()'

      - name: Run ABL_BoundaryMapping
        working-directory: ./Solver/test/NavierStokes/ABLBoundaryMapping
        run: |
          mpiexec -n 64 ./horses3d.ns ABLBoundaryMapping.control
        if: '!cancelled()'
      
#
# 35) Actuator Line (AL) external controller module
# --------------------------------------------
      - name: Build ActuatorLineController
        working-directory: ./Solver/test/NavierStokes/ActuatorLineController/SETUP
        run: |
          make MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
          cd ../ActuatorDef/controller
          git clone https://github.com/EduardoJane/DRC_Fortran_H3D.git
          cd DRC_Fortran_H3D/Source
          make ns MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}}
          mv ../DISCON/DISCON_glin64.so ../../
        if: '!cancelled()'

      - name: Run ActuatorLineController
        working-directory: ./Solver/test/NavierStokes/ActuatorLineController
        run: |
          mpiexec -n 64 ./horses3d.ns ActuatorLineController.control
        if: '!cancelled()'

# This is a basic workflow to help you get started with Actions

name: CI PARALLEL (MPI) MU

########################################################################
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # Comment lines 10-13 to deactivate automatic running until Metis webpage is online again.
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Define strategy matrix
    strategy:
      fail-fast: false
      matrix:
        compiler: ['gfortran']
        mode: ['RELEASE']
        comm: ['PARALLEL']
        enable_threads: ['NO']

    env:
      METIS_HOME:  /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64
    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # IF COMPILER = GFORTRAN -> INSTALL OPEN-MPI #
      - name: install openmpi
        if: (matrix.compiler == 'gfortran')
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev

      - name: Install METIS (gnu)
        if: (matrix.compiler == 'gfortran') 
        run: |
          wget "https://src.fedoraproject.org/lookaside/pkgs/metis/metis-5.1.0.tar.gz/5465e67079419a69e0116de24fce58fe/metis-5.1.0.tar.gz" 
          tar -xvf metis-5.1.0.tar.gz
          cd metis-5.1.0
          make config cc=gcc
          make
          mv /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/libmetis /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/lib
          mv /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/programs /home/runner/work/horses3d-gpu/horses3d-gpu/metis-5.1.0/build/Linux-x86_64/bin

      - name: Check METIS PATH
        run: echo $METIS_HOME

      - name: Show ${{matrix.compiler}} version
        run: |
          ${{matrix.compiler}} --version

      - name: Configure
        working-directory: ./Solver
        run: ./configure

      - name: Compile horses3d
        working-directory: ./Solver
        run: |
         make allclean MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
         make mu MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES

########################################################################
#######                         MULTIPHASE                      ########
########################################################################

#
# 5) Multiphase monopole with acoustics, sponge and Reinforcement Learning p-adaptation
# --------------------------------------------
      - name: Build Multiphase_Monopole_pAdaptationRL
        working-directory: ./Solver/test/Multiphase/Monopole_pAdaptationRL/SETUP
        run: |
          make mu MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run Multiphase_Monopole_pAdaptationRL
        working-directory: ./Solver/test/Multiphase/Monopole_pAdaptationRL
        run: |
          mpiexec -n 64 ./horses3d.mu monopole_pAdaptationRL.control
        if: '!cancelled()'

#
# 6) Mu AL
# -------------------------------

      - name: Build Mu-AL
        working-directory: ./Solver/test/Multiphase/ActuatorLineInterpolation/SETUP
        run: |
          make mu MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: '!cancelled()'

      - name: Run Mu-AL
        working-directory: ./Solver/test/Multiphase/ActuatorLineInterpolation
        run: |
          mpiexec -n 64 ./horses3d.mu Actuator.control
        if: '!cancelled()'

#
# 7) Snell
# ----------------------------
      - name: Build MultiphaseSnell
        working-directory: ./Solver/test/Multiphase/Snell/SETUP
        run: |
          make mu MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: ('!cancelled()')

      - name: Run MultiphaseSnell
        working-directory: ./Solver/test/Multiphase/Snell
        run: |
          mpiexec -n 64 ./horses3d.mu snell.control
        if: ('!cancelled()')

#
# 8) Mixed RK
# ----------------------------
      - name: Build MultiphaseMixedRK
        working-directory: ./Solver/test/Multiphase/MixedRK/SETUP
        run: |
          make mu MODE=${{matrix.mode}} COMPILER=${{matrix.compiler}} COMM=${{matrix.comm}} ENABLE_THREADS=${{matrix.enable_threads}} WITH_METIS=YES
        if: ('!cancelled()')

      - name: Run MultiphaseMixedRK
        working-directory: ./Solver/test/Multiphase/MixedRK
        run: |
          mpiexec -n 64 ./horses3d.mu mixedRK.control
        if: ('!cancelled()')